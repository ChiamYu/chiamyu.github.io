/*! JS group for layout Home or Post Chirpy v2.3 https://github.com/cotes2020/jekyll-theme-chirpy © 2020 Cotes Chung MIT License */ /*! Aggregation of common JS. Chirpy@2.3 https://github.com/cotes2020/jekyll-theme-chirpy © 2020 Cotes Chung MIT License */ /* Reference: https://bootsnipp.com/snippets/featured/link-to-top-page */ $(function() { $(window).scroll(() => { if ($(this).scrollTop() > 50 && $("#sidebar-trigger").css("display") === "none") { $("#back-to-top").fadeIn(); } else { $("#back-to-top").fadeOut(); } }); $("#back-to-top").click(() => { $("body,html").animate({ scrollTop: 0 }, 800); return false; }); }); /* * This script make #search-result-wrapper switch to unloaded or shown automatically. */ $(function() { const btnSbTrigger = $("#sidebar-trigger"); const btnSearchTrigger = $("#search-trigger"); const btnCancel = $("#search-cancel"); const btnClear = $("#search-cleaner"); const main = $("#main"); const topbarTitle = $("#topbar-title"); const searchWrapper = $("#search-wrapper"); const resultWrapper = $("#search-result-wrapper"); const results = $("#search-results"); const input = $("#search-input"); const hints = $("#search-hints"); const scrollBlocker = (function () { let offset = 0; return { block() { offset = window.scrollY; $("html,body").scrollTop(0); }, release() { $("html,body").scrollTop(offset); }, getOffset() { return offset; } }; }()); /*--- Actions in small screens (Sidebar unloaded) ---*/ const mobileSearchBar = (function () { return { on() { btnSbTrigger.addClass("unloaded"); topbarTitle.addClass("unloaded"); btnSearchTrigger.addClass("unloaded"); searchWrapper.addClass("d-flex"); btnCancel.addClass("loaded"); }, off() { btnCancel.removeClass("loaded"); searchWrapper.removeClass("d-flex"); btnSbTrigger.removeClass("unloaded"); topbarTitle.removeClass("unloaded"); btnSearchTrigger.removeClass("unloaded"); } }; }()); const resultSwitch = (function () { let visible = false; return { on() { if (!visible) { // the block method must be called before $(#main) unloaded. scrollBlocker.block(); resultWrapper.removeClass("unloaded"); main.addClass("unloaded"); visible = true; } }, off() { if (visible) { results.empty(); if (hints.hasClass("unloaded")) { hints.removeClass("unloaded"); } resultWrapper.addClass("unloaded"); btnClear.removeClass("visible"); main.removeClass("unloaded"); // now the release method must be called after $(#main) display scrollBlocker.release(); input.val(""); visible = false; } }, isVisible() { return visible; } }; }()); function isMobileView() { return btnCancel.hasClass("loaded"); } btnSearchTrigger.click(function() { mobileSearchBar.on(); resultSwitch.on(); input.focus(); }); btnCancel.click(function() { mobileSearchBar.off(); resultSwitch.off(); }); input.focus(function() { searchWrapper.addClass("input-focus"); }); input.focusout(function() { searchWrapper.removeClass("input-focus"); }); input.on("keyup", function(e) { if (e.keyCode === 8 && input.val() === "") { if (!isMobileView()) { resultSwitch.off(); } else { hints.removeClass("unloaded"); } } else { if (input.val() !== "") { resultSwitch.on(); if (!btnClear.hasClass("visible")) { btnClear.addClass("visible"); } if (isMobileView()) { hints.addClass("unloaded"); } } } }); btnClear.on("click", function() { input.val(""); if (isMobileView()) { hints.removeClass("unloaded"); results.empty(); } else { resultSwitch.off(); } input.focus(); btnClear.removeClass("visible"); }); }); /** * Expand or close the sidebar in mobile screens. */ $(function() { const sidebarUtil = (function () { const ATTR_DISPLAY = "sidebar-display"; let isExpanded = false; const body = $("body"); return { toggle() { if (isExpanded === false) { body.attr(ATTR_DISPLAY, ""); } else { body.removeAttr(ATTR_DISPLAY); } isExpanded = !isExpanded; } }; }()); $("#sidebar-trigger").click(sidebarUtil.toggle); $("#mask").click(sidebarUtil.toggle); }); /* * Hide Header on scroll down */ $(function() { const topbarWrapper = $("#topbar-wrapper"); const toc = $("#toc-wrapper"); const access = $(".access"); const searchInput = $("#search-input"); let didScroll; let lastScrollTop = 0; const delta = 5; const topbarHeight = topbarWrapper.outerHeight(); function hasScrolled() { var st = $(this).scrollTop(); /* Make sure they scroll more than delta */ if (Math.abs(lastScrollTop - st) <= delta) { return; } if (st > lastScrollTop && st > topbarHeight) { /* Scroll Down */ topbarWrapper.removeClass("topbar-down").addClass("topbar-up"); if (toc.length > 0) { toc.removeClass("topbar-down"); } if (access.length > 0) { access.removeClass("topbar-down"); } if (searchInput.is(":focus")) { searchInput.blur(); /* remove focus */ } } else if (st + $(window).height() < $(document).height()) { /* Scroll Up */ topbarWrapper.removeClass("topbar-up").addClass("topbar-down"); if (toc.length > 0) { toc.addClass("topbar-down"); } if (access.length > 0) { access.addClass("topbar-down"); } } lastScrollTop = st; } $(window).scroll(function(event) { if ($("#topbar-title").is(":hidden")) { /* Not in small screens */ didScroll = true; } }); setInterval(function() { if (didScroll) { hasScrolled(); didScroll = false; } }, 250); }); /* * Top bar title auto change while scrolling in mobile screens. */ $(function() { const topbarTitle = $("#topbar-title"); const postTitle = $("div.post>h1"); const DEFAULT = topbarTitle.text().trim(); let title = (postTitle.length > 0) ? postTitle.text().trim() : $("h1").text().trim(); if ($("#page-category").length || $("#page-tag").length) { /* The title in Category or Tag page will be "<title> <count_of_posts>" */ if (/\s/.test(title)) { title = title.replace(/[0-9]/g, "").trim(); } } /* Replace topbar title while scroll screens. */ $(window).scroll(function () { if ($("#post-list").length /* in Home page */ || postTitle.is(":hidden") /* is tab pages */ || topbarTitle.is(":hidden") /* not mobile screens */ || $("#sidebar.sidebar-expand").length) { /* when the sidebar trigger is clicked */ return false; } if ($(this).scrollTop() >= 95) { if (topbarTitle.text() !== title) { topbarTitle.text(title); } } else { if (topbarTitle.text() !== DEFAULT) { topbarTitle.text(DEFAULT); } } }); /* Click title remove hover effect. */ topbarTitle.click(function() { $("body,html").animate({scrollTop: 0}, 800); }); }); /* * Copy current page url to clipboard. */ function copyLink(url) { if (!url || 0 === url.length) { url = window.location.href; } const $temp = $("<input>"); $("body").append($temp); $temp.val(url).select(); document.execCommand("copy"); $temp.remove(); alert("Link copied successfully!"); } /** * Initial Bootstrap Tooltip. * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2019 Cotes Chung * MIT License */ $(function () { $('[data-toggle="tooltip"]').tooltip(); }); /* * Calculate the Timeago */ $(function() { const timeagoElem = $(".timeago"); let toRefresh = timeagoElem.length; let intervalId = void 0; function timeago(iso, preposition) { let now = new Date(); let past = new Date(iso); let prep = (typeof preposition !== "undefined" ? `${preposition} ` : ""); if (past.getFullYear() !== now.getFullYear()) { toRefresh -= 1; return prep + past.toLocaleString("en-US", { year: "numeric", month: "short", day: "numeric" }); } if (past.getMonth() !== now.getMonth()) { toRefresh -= 1; return prep + past.toLocaleString("en-US", { month: "short", day: "numeric" }); } let seconds = Math.floor((now - past) / 1000); let day = Math.floor(seconds / 86400); if (day >= 1) { toRefresh -= 1; return day + " day" + (day > 1 ? "s" : "") + " ago"; } let hour = Math.floor(seconds / 3600); if (hour >= 1) { return hour + " hour" + (hour > 1 ? "s" : "") + " ago"; } let minute = Math.floor(seconds / 60); if (minute >= 1) { return minute + " minute" + (minute > 1 ? "s" : "") + " ago"; } return "just now"; } function updateTimeago() { $(".timeago").each(function() { if ($(this).children("i").length > 0) { let node = $(this).children("i"); let date = node.text(); /* ISO Date: "YYYY-MM-DDTHH:MM:SSZ" */ $(this).text(timeago(date, $(this).attr("prep"))); $(this).append(node); } }); if (toRefresh === 0 && typeof intervalId !== "undefined") { clearInterval(intervalId); /* stop interval */ } return toRefresh; } if (toRefresh === 0) { return; } if (updateTimeago() > 0) { /* run immediately */ intervalId = setInterval(updateTimeago, 60000); /* run every minute */ } }); /*! * Bootstrap Table of Contents v1.0.1 (http://afeld.github.io/bootstrap-toc/) * Copyright 2015 Aidan Feldman * Licensed under MIT (https://github.com/afeld/bootstrap-toc/blob/gh-pages/LICENSE.md) */ !function(a){"use strict";window.Toc={helpers:{findOrFilter:function(e,t){var n=e.find(t);return e.filter(t).add(n).filter(":not([data-toc-skip])")},generateUniqueIdBase:function(e){return a(e).text().trim().replace(/\'/gi,"").replace(/[& +$,:;=?@"#{}|^~[`%!'<>\]\.\/\(\)\*\\\n\t\b\v]/g,"-").replace(/-{2,}/g,"-").substring(0,64).replace(/^-+|-+$/gm,"").toLowerCase()||e.tagName.toLowerCase()},generateUniqueId:function(e){for(var t=this.generateUniqueIdBase(e),n=0;;n++){var r=t;if(0<n&&(r+="-"+n),!document.getElementById(r))return r}},generateAnchor:function(e){if(e.id)return e.id;var t=this.generateUniqueId(e);return e.id=t},createNavList:function(){return a('<ul class="nav navbar-nav"></ul>')},createChildNavList:function(e){var t=this.createNavList();return e.append(t),t},generateNavEl:function(e,t){var n=a('<a class="nav-link"></a>');n.attr("href","#"+e),n.text(t);var r=a("<li>");return r.append(n),r},generateNavItem:function(e){var t=this.generateAnchor(e),n=a(e),r=n.data("toc-text")||n.text();return this.generateNavEl(t,r)},getTopLevel:function(e){for(var t=1;t<=6;t++){if(1<this.findOrFilter(e,"h"+t).length)return t}return 1},getHeadings:function(e,t){var n="h"+t,r="h"+(t+1);return this.findOrFilter(e,n+","+r)},getNavLevel:function(e){return parseInt(e.tagName.charAt(1),10)},populateNav:function(r,a,e){var i,s=r,c=this;e.each(function(e,t){var n=c.generateNavItem(t);c.getNavLevel(t)===a?s=r:i&&s===r&&(s=c.createChildNavList(i)),s.append(n),i=n})},parseOps:function(e){var t;return(t=e.jquery?{$nav:e}:e).$scope=t.$scope||a(document.body),t}},init:function(e){(e=this.helpers.parseOps(e)).$nav.attr("data-toggle","toc");var t=this.helpers.createChildNavList(e.$nav),n=this.helpers.getTopLevel(e.$scope),r=this.helpers.getHeadings(e.$scope,n);this.helpers.populateNav(t,n,r)}},a(function(){a('nav[data-toggle="toc"]').each(function(e,t){var n=a(t);Toc.init(n)})})}(jQuery); /* * Hide the empty ToC in posts. * v2.0 * https://github.com/cotes2020/jekyll-theme-chirpy * © 2019 Cotes Chung * MIT Licensed */ $(function() { if ($("#post-wrapper .post-content h1").length == 0 && $("#post-wrapper .post-content h2").length == 0) { $("#toc-wrapper").addClass("unloaded"); } });
